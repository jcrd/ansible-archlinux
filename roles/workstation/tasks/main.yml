# Set up mirrorlist.
- name: Install reflector
  pacman: name=reflector

- name: Remove mirrorlist if not created with reflector
  shell: |
    grep '# With:[[:space:]]*reflector' /etc/pacman.d/mirrorlist || \
    rm /etc/pacman.d/mirrorlist
  args:
    removes: /etc/pacman.d/mirrorlist

- name: Update mirrorlist with reflector script
  script: update-mirrorlist.sh
  args:
    creates: /etc/pacman.d/mirrorlist

- name: Update pacman cache
  pacman: update_cache=yes upgrade=yes


# Packages.
- name: Install packages
  pacman:
    name: "{{ system_packages + packages + font_packages + input_drivers }}"
  notify:
    - sensors-detect
    - fc-cache
  tags: packages

- name: Install kernels
  pacman: name={{ kernels | difference(["linux"]) }}
  tags: packages

- name: Uninstall default kernel
  pacman: name=linux state=absent
  when: "'linux' not in kernels"
  tags: packages

- name: Install intel graphics drivers
  block:
    - name: Install libva-intel-driver
      pacman: name=libva-intel-driver
    - name: Add i915 module to mkinitcpio
      lineinfile:
        path: /etc/mkinitcpio.conf
        regexp: "^MODULES=()"
        line: "MODULES=(i915)"
      notify: mkinitcpio
  when: "'intel' in graphics_drivers"
  tags: packages

- name: Install nouveau graphics drivers
  pacman:
    name:
      - xf86-video-nouveau
      - libva-mesa-driver
  when: "'nouveau' in graphics_drivers"
  tags: packages


# User.
- name: Create user {{ username }}
  user:
    name: "{{ username }}"
    groups: "{{ ['wheel'] }}"
    append: yes

- name: Set {{ username }} shell
  user:
    name: "{{ username }}"
    shell: /usr/bin/zsh
  tags: packages

- name: Set {{ username }} groups
  user:
    name: "{{ username }}"
    groups: "{{ package_groups }}"
    append: yes
  tags: packages

- name: Configure sudo
  copy:
    content: "{{ item.line }}\n"
    dest: /etc/sudoers.d/{{ item.file }}
    mode: 0440
    validate: visudo -cf %s
  loop:
    - { file: env_keep, line: 'Defaults env_keep += "HOME"' }
    - { file: wheel, line: '%wheel ALL=(ALL) NOPASSWD: ALL' }

- name: Configure polkit
  copy:
    src: 49-nopasswd-wheel.rules
    dest: /etc/polkit-1/rules.d
  tags: packages


# Configure etckeeper.
- name: Initialize etckeeper
  command: etckeeper init
  args:
    creates: /etc/.git
  tags: packages

- name: Configure etckeeper git repo
  git_config:
    scope: local
    repo: /etc
    name: commit.gpgsign
    value: false
  tags: packages


# Configure pacman.
- name: Configure makepkg
  copy: src=makepkg.conf dest=/etc/makepkg.conf

- name: Check pacman cache directory
  stat: path=/var/cache/pacman/pkg
  register: pacman_cache

- name: Configure pacman cache directory
  file:
    path: /var/cache/pacman/pkg
    group: "{{ username }}"
    mode: 0775
  when: pacman_cache.stat.exists and pacman_cache.stat.isdir

- name: Create pacman scripts directory
  file: path=/etc/pacman.d/scripts state=directory

- name: Install custom pacman scripts
  copy:
    src: "{{ item }}"
    dest: /etc/pacman.d/scripts
    mode: preserve
  loop:
    - stale-units

# Depends on {{ username }}.
- name: Install dbus-user-run script
  template:
    src: dbus-user-run.sh.j2
    dest: /etc/pacman.d/scripts/dbus-user-run
    mode: 0755

- name: Create pacman hooks directory
  file: path=/etc/pacman.d/hooks state=directory

- name: Install custom pacman hooks
  copy: src={{ item }} dest=/etc/pacman.d/hooks
  loop:
    - awesome-checkupdates.hook
    - stale-units.hook
    - zz-sync.hook

# Configure pacman repos.
- name: Create local repo directories
  file:
    path: /var/cache/pacman/{{ item }}
    state: directory
    group: "{{ username }}"
    mode: 0775
  loop: "{{ local_repos }}"

- name: Create local repo databases
  command: repo-add /var/cache/pacman/{{ item }}/{{ item }}.db.tar
  args:
    creates: /var/cache/pacman/{{ item }}/{{ item }}.db.tar
  loop: "{{ local_repos }}"
  become: yes
  become_user: "{{ username }}"

- name: Configure local repos
  template: src=repo.j2 dest=/etc/pacman.d/{{ item }}
  vars:
    repo: "{{ item }}"
  loop: "{{ local_repos }}"

- name: Configure pacman
  template: src=pacman.conf.j2 dest=/etc/pacman.conf

- name: Update pacman cache
  pacman: update_cache=yes


# Configure kernel.
- name: Blacklist kernel modules
  kernel_blacklist: name={{ item }}
  loop:
    # Speaker beep.
    - pcspkr
    # Watchdog.
    - iTCO_wdt

# See https://www.kernel.org/doc/html/latest/admin-guide/kernel-parameters.html
- name: Configure kernel sysctl
  sysctl:
    name: kernel.{{ item.name }}
    value: "{{ item.value }}"
    sysctl_file: /etc/sysctl.d/kernel.conf
  loop:
    # Wait 5 seconds before rebooting on panic.
    - { name: panic, value: 5 }
  when: not container

- name: Set I/O schedulers
  copy: src=60-io_schedulers.rules dest=/etc/udev/rules.d


# Configure fonts.
- name: Configure preferred fonts
  copy: src=local.conf dest=/etc/fonts

- name: Configure font rendering
  file:
    src: /etc/fonts/conf.avail/{{ item }}
    dest: /etc/fonts/conf.d/{{ item }}
    state: link
  loop:
    - 10-sub-pixel-rgb.conf
    - 11-lcdfilter-default.conf
  tags: packages


# Configure smartd.
- name: Configure smartd
  template: src=smartd.conf.j2 dest=/etc/smartd.conf

- name: Install smartd-notify script
  copy:
    src: smartd-notify
    dest: /usr/local/bin
    mode: preserve
    owner: "{{ username }}"
    group: "{{ username }}"


# Configure flatpak.
- name: Add flathub flatpak remote
  flatpak_remote:
    name: flathub
    flatpakrepo_url: https://flathub.org/repo/flathub.flatpakrepo
  tags: packages


# Configure network.
- name: Configure firewalld for docker
  firewalld:
    zone: trusted
    interface: docker0
    state: enabled
    permanent: yes
  when: "'docker' in packages"
  tags:
    - packages
    - dbus

- name: Configure firewalld for libvirt
  lineinfile:
    path: /etc/firewalld/firewalld.conf
    regexp: "^FirewallBackend=nftables"
    line: "FirewallBackend=iptables"
  tags:
    - packages

- name: Create systemd-resolved resolv.conf symlink
  file:
    src: /run/systemd/resolve/stub-resolv.conf
    dest: /etc/resolv.conf
    state: link
    force: yes
  when: not container


# Configure systemd.
- name: Create journald conf directory
  file: path=/etc/systemd/journald.conf.d state=directory

- name: Configure journald
  copy: src=00-journald.conf dest=/etc/systemd/journald.conf.d

- name: Create logind conf directory
  file: path=/etc/systemd/logind.conf.d state=directory

- name: Configure logind
  copy: src=00-logind.conf dest=/etc/systemd/logind.conf.d

- name: Enable systemd units
  service: name={{ item }} enabled=yes
  loop:
    - NetworkManager.service
    - bluetooth.service
    - dbus-broker.service
    - firewalld.service
    - irqbalance.service
    - lightdm.service
    - rngd.service
    - smartd.service
    - systemd-resolved.service
  tags:
    - packages
    - dbus

- name: Enable systemd user units
  service: name={{ item }} scope=user enabled=yes
  loop:
    - pulseaudio.service
  tags:
    - packages
    - dbus

- name: Enable dbus-broker service globally
  service: name=dbus-broker.service scope=global enabled=yes
  tags:
    - packages
    - dbus

- name: Enable systemd package units
  service: name={{ item }} enabled=yes
  loop: "{{ package_units }}"
  tags:
    - packages
    - dbus

- name: Install custom systemd units
  copy: src={{ item }} dest=/etc/systemd/system
  loop: "{{ custom_units }}"

- name: Enable custom systemd units
  service: name={{ item }} enabled=yes
  loop: "{{ custom_units }}"
  tags: dbus


# Configure qutebrowser.
- name: Install qutebrowser spellcheck dictionary
  command: /usr/share/qutebrowser/scripts/dictcli.py install {{ dictionary }}
  when: "'qutebrowser' in packages"
  tags: packages

- name: Create package symlinks
  file:
    src: "{{ item.target }}"
    dest: /usr/local/bin/{{ item.name }}
    state: link
  loop: "{{ package_symlinks }}"
  tags: packages

- name: Configure lightdm
  copy:
    src: lightdm.conf
    dest: /etc/lightdm/lightdm.conf
  tags: packages

- name: Configure greeter
  template:
    src: lightdm-mini-greeter.conf.j2
    dest: /etc/lightdm/lightdm-mini-greeter.conf
  tags: packages


# Configure system.
- name: Generate locale
  locale_gen: name={{ locale }}

- name: Set LANG in /etc/locale.conf
  copy:
    content: "LANG={{ locale }}\n"
    dest: /etc/locale.conf

- name: Set timezone to {{ timezone }}
  file:
    src: /usr/share/zoneinfo/{{ timezone }}
    dest: /etc/localtime

- name: Generate /etc/adjtime
  command: hwclock --systohc
  args:
    creates: /etc/adjtime
# Can't interact with hardware clock in docker.
  when: not container

- name: Set hostname
  copy:
    content: "{{ hostname }}\n"
    dest: /etc/hostname
# Can't set hostname in docker.
  when: not container

- name: Populate /etc/hosts
  template: src=hosts.j2 dest=/etc/hosts
  when: not container


# Bootloader.
- name: Install intel microcode updates
  pacman: name=intel-ucode
  when: not container and processor == "intel"
  tags: packages

- name: Set up systemd-boot for UEFI
  block:
    - name: Install systemd-boot to ESP
      command: bootctl --path={{ esp_mount }} install
    - name: Add systemd-boot entries
      template:
        src: entry.conf.j2
        dest: "{{ esp_mount }}/loader/entries/{{ item }}.conf"
      vars:
        kernel_name: "{{ item }}"
      loop: "{{ kernels }}"
    - name: Install systemd-boot pacman hook
      copy: src=systemd-boot.hook dest=/etc/pacman.d/hooks
  when: not container and firmware == "UEFI"

- name: Set up grub for BIOS
  block:
    - name: Install grub
      pacman: name=grub
    - name: Install grub to MBR
      command: grub-install --target=i386-pc {{ mbr_device }}
    - name: Configure grub
      template: src=grub.j2 dest=/etc/default/grub
      notify: grub-mkconfig
  when: not container and firmware == "BIOS"
  tags: packages
